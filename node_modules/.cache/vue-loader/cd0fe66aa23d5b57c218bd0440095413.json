{"remainingRequest":"/home/hitesh/work/vue/clothing_vue/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/hitesh/work/vue/clothing_vue/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/hitesh/work/vue/clothing_vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/hitesh/work/vue/clothing_vue/src/pages/Home.vue?vue&type=template&id=5a90ec03&scoped=true&","dependencies":[{"path":"/home/hitesh/work/vue/clothing_vue/src/pages/Home.vue","mtime":1645036813491},{"path":"/home/hitesh/work/vue/clothing_vue/node_modules/cache-loader/dist/cjs.js","mtime":1645036416724},{"path":"/home/hitesh/work/vue/clothing_vue/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1645036428641},{"path":"/home/hitesh/work/vue/clothing_vue/node_modules/cache-loader/dist/cjs.js","mtime":1645036416724},{"path":"/home/hitesh/work/vue/clothing_vue/node_modules/vue-loader/lib/index.js","mtime":1645036428641}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}